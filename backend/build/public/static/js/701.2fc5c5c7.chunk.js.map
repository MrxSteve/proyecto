{"version":3,"file":"static/js/701.2fc5c5c7.chunk.js","mappings":"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","sources":["components/game/components/board/components/item/helpers.tsx","components/game/components/board/components/item/index.tsx","components/game/components/board/components/wrapper/index.tsx","components/game/components/board/components/header/index.tsx","components/game/components/board/components/table/index.tsx","components/game/components/board/components/rows/index.tsx","components/game/components/board/components/score/index.tsx","components/game/components/scoreCounter/index.tsx","components/logo/index.tsx","components/gameDifficulty/index.tsx","pages/game.tsx"],"sourcesContent":["import type { CategoriesType } from \"../../../../../../interfaces\";\r\nimport Icon from \"../../../icon\";\r\n\r\n// Renderizando iconos y texto\r\nexport const LOWER_SECTION_OPTIONS: Record<\r\n  CategoriesType,\r\n  JSX.Element | string\r\n> = {\r\n  THREE_KIND: \"3x\",\r\n  FOUR_KIND: \"4x\",\r\n  FULL_HOUSE: <Icon type=\"full-house\" fill=\"white\" />,\r\n  SMALL_STRAIGHT: (\r\n    <div className=\"board-item-straight\">\r\n      <Icon type=\"cards\" fill=\"white\" />\r\n      <div>Small</div>\r\n    </div>\r\n  ),\r\n  LARGE_STRAIGHT: (\r\n    <div className=\"board-item-straight\">\r\n      <Icon type=\"cards\" fill=\"white\" />\r\n      <div>Large</div>\r\n    </div>\r\n  ),\r\n  YATZY: <div className=\"board-item-yatzy\">Yatzy</div>,\r\n  CHANCE: \"?\",\r\n};","import \"./styles.css\"\r\nimport React from \"react\";\r\nimport type { CategoriesType, ItemType, valueDice } from \"../../../../../../interfaces\";\r\nimport { LOWER_SECTION_OPTIONS } from \"./helpers\";\r\nimport { EItemType } from \"../../../../../../utils/constants\";\r\n//import { EItemType } from \"../../../../../../utils/constants\";\r\n\r\ninterface ItemProps {\r\n    label?: string; //opcional\r\n    size?: number; //opcional\r\n    type?: ItemType; //requerido?\r\n    value: valueDice | CategoriesType; //requerido\r\n}\r\n\r\nconst Item = ({\r\n    label = \"\",\r\n    size = 50,\r\n    type = EItemType.UPPER_SECTION,\r\n    value = 1,\r\n}: ItemProps) => (\r\n    <div\r\n    className={`board-item ${type.toLowerCase()} ${\r\n        type === EItemType.UPPER_SECTION ? `dice-${value}` : \"\"\r\n      }`}       \r\n    style={{width: size, height: size}} // le pasamos el valor del size arriba\r\n    title={label || value.toString()}\r\n    >\r\n        {type === EItemType.LOWER_SECTION && \r\n        LOWER_SECTION_OPTIONS [value as CategoriesType]}\r\n    </div>\r\n    );\r\n\r\nexport default React.memo(Item);","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\ninterface WrapperProps {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nconst BoardWrapper = ({ children }: WrapperProps) => (\r\n  <div className=\"board-wrapper\">{children}</div>\r\n);\r\n\r\nexport default React.memo(BoardWrapper);","import \"./styles.css\"\r\nimport { TypeGame } from '../../../../../../interfaces/index';\r\nimport { DEFUAL_LABELS_HEADER, ETypeGame, LABELS_GAME } from '../../../../../../utils/constants';\r\nimport React from \"react\";\r\n\r\ninterface BoardItemProps {\r\n    label: string;\r\n    typeGame: TypeGame;\r\n}\r\n\r\nconst BoardItem = ({\r\n    label = \"\",\r\n    typeGame = ETypeGame.SOLO,\r\n  }: BoardItemProps) => (\r\n    <div className=\"board-header-panel\">\r\n      {typeGame === ETypeGame.SOLO ? (\r\n        label\r\n      ) : (\r\n        <div className=\"board-header-panel-player\">\r\n          <div>\r\n            {\r\n              LABELS_GAME[\r\n                typeGame === ETypeGame.BOT || typeGame === ETypeGame.ONLINE\r\n                  ? \"YOU\"\r\n                  : \"PLAYER1\"\r\n              ]\r\n            }\r\n          </div>\r\n          <div>\r\n            {typeGame === ETypeGame.BOT\r\n              ? LABELS_GAME.BOT\r\n              : typeGame === ETypeGame.ONLINE\r\n              ? LABELS_GAME.THEM\r\n              : LABELS_GAME.PLAYER2}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n\r\n  const BoardHeader = ({ typeGame = ETypeGame.SOLO }: { typeGame: TypeGame }) => (\r\n    <div className=\"board-header\">\r\n      {DEFUAL_LABELS_HEADER.map((label, key) => (\r\n        <BoardItem key={key} label={label} typeGame={typeGame} />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\nexport default React.memo(BoardHeader);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport type { IBoard, IBoardItem, Player, TotalPlayers, TypeGame } from \"../../../../../../interfaces\";\r\nimport { ETypeGame } from \"../../../../../../utils/constants\";\r\nimport { BoardRows, BoardScore } from \"..\";\r\n\r\ninterface BoardTableProps {\r\n    items: IBoard;\r\n    players: Player[];\r\n    thrownDice?: boolean;\r\n    turn?: TotalPlayers;\r\n    typeGame?: TypeGame;\r\n    handleClick: (item: IBoardItem, player: TotalPlayers) => void;\r\n  }\r\n\r\n  const BoardTable = ({\r\n    items,\r\n    players,\r\n    thrownDice = false,\r\n    turn = 1,\r\n    typeGame = ETypeGame.SOLO,\r\n    handleClick,\r\n  }: BoardTableProps) => (\r\n    <div className=\"board-table-row-wrapper\">\r\n      {new Array(7).fill(null).map((_, index) => (\r\n        <div className=\"board-table-row\" key={index}>\r\n          <div className=\"board-table-row-item\">\r\n            {index < 6 ? (\r\n              <BoardRows\r\n                item={items.UPPER_SECTION[index]}\r\n                thrownDice={thrownDice}\r\n                turn={turn}\r\n                typeGame={typeGame}\r\n                handleClick={handleClick}\r\n              />\r\n            ) : (\r\n              <BoardScore players={players} />\r\n            )}\r\n          </div>\r\n          <div className=\"board-table-row-item\">\r\n            <BoardRows\r\n              item={items.LOWER_SECTION[index]}\r\n              thrownDice={thrownDice}\r\n              turn={turn}\r\n              typeGame={typeGame}\r\n              handleClick={handleClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n\r\nexport default React.memo(BoardTable);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { IBoardItem, TotalPlayers, TypeGame } from \"../../../../../../interfaces\";\r\nimport { ETypeGame, YATZY_SCORES } from \"../../../../../../utils/constants\";\r\nimport { BoardItem } from \"..\";\r\nimport { disable } from \"workbox-navigation-preload\";\r\n\r\ninterface BoardRowsProps {\r\n    item: IBoardItem;\r\n    thrownDice?: boolean;\r\n    typeGame?: TypeGame;\r\n    turn?: TotalPlayers;\r\n    handleClick: (item: IBoardItem, player: TotalPlayers) => void;\r\n  }\r\n\r\n  interface BoardRowsButtonProps extends Omit<BoardRowsProps, \"typeGame\"> {\r\n    player: TotalPlayers;\r\n  }\r\n  \r\n  const BoardRowsButton = ({\r\n    item,\r\n    thrownDice = false,\r\n    turn = 1,\r\n    player = 1,\r\n    handleClick,\r\n  }: BoardRowsButtonProps) => {\r\n    const { isSelected, isUsed, temporal, value, isBonusYatzy } =\r\n    item.score[player - 1];\r\n\r\n    // Dependiendo del estado, se bloqueará el botón...\r\n    const disabledButton = !(turn === player && thrownDice && !isUsed);\r\n\r\n    // Dependiendo del estado se valida el valor que se mostrará en la casilla.\r\n    const valueDisplay =\r\n        (thrownDice && turn === player) || isUsed\r\n            ? isUsed\r\n            ? value\r\n            : temporal\r\n        : \"\";\r\n\r\n    // Para renderizar dinamicamente el title\r\n    const title = item.label + (valueDisplay !== \"\" ? ` = ${valueDisplay}` : \"\");\r\n\r\n    // La clase que se establece cuando un ítem ha sido seleccionado,\r\n    // o que potencialmente puede ser usado.\r\n    const usedItemClass = isUsed ? \"used-score\" : turn === player ? \"turn\" : \"\";\r\n\r\n    // Clase que muestra que la casilla está activada y puede ser seleccionada\r\n    const activeItemClass =\r\n        turn === player && thrownDice ? (isUsed ? \"used\" : \"active\") : \"\";\r\n\r\n    // Muestra que el ítem se ha seleccionado...\r\n    const selectedItemClass = isSelected ? \"selected\" : \"\";\r\n\r\n    return (\r\n        <button\r\n        title={title}\r\n        disabled={disabledButton}\r\n        className={`board-panel-row-score-button ${usedItemClass} ${activeItemClass} ${selectedItemClass}`}\r\n        onClick={() => handleClick(item, player)}\r\n        >\r\n        {valueDisplay}\r\n        {/* Se muestra que se tiene una bonificación por hacer múltiples Yanzyes */}\r\n        {isBonusYatzy && <span>{YATZY_SCORES.YATZY}</span>}\r\n    </button>\r\n    )\r\n  }\r\n  \r\n  const BoardRows = ({\r\n    item,\r\n    thrownDice = false,\r\n    typeGame = ETypeGame.SOLO,\r\n    turn = 1,\r\n    handleClick,\r\n  }: BoardRowsProps) => {\r\n    const extProps = { item, thrownDice, turn, handleClick };\r\n  \r\n    return (\r\n      <div className=\"board-panel-row-category\">\r\n        <div className=\"board-panel-row-item\">\r\n          <BoardItem type={item.type} value={item.value} label={item.label} />\r\n        </div>\r\n        <div className=\"board-panel-row-score\">\r\n          <BoardRowsButton {...extProps} player={1} />\r\n          {typeGame === ETypeGame.SOLO ? (\r\n            <div className=\"board-panel-row-score-label\">{item.label}</div>\r\n          ) : (\r\n            <BoardRowsButton {...extProps} player={2} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default React.memo(BoardRows);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { Player } from \"../../../../../../interfaces\";\r\nimport { BONUS_VALUE, LABELS_GAME, MIN_SCORE_BONUS } from \"../../../../../../utils/constants\";\r\nimport Icon from \"../../../icon\";\r\nimport ScoreCounter from \"../../../scoreCounter\";\r\n\r\nconst BoardScoreBonus = () => (\r\n    <div className=\"board-panel-score-bonus\">\r\n      <div>{LABELS_GAME.BONUS}</div>\r\n      <div>+{BONUS_VALUE}</div>\r\n    </div>\r\n  );\r\n  \r\n  const BoardScoreItem = ({ value = 0 }: { value: number }) => (\r\n    <div className=\"board-panel-score-item\">\r\n      <ScoreCounter score={value} className=\"board-panel-score-item-score\" />\r\n      <div className=\"board-panel-score-item-bonus\">/{MIN_SCORE_BONUS}</div>\r\n    </div>\r\n  );\r\n  \r\n  const BoardBonusEarned = () => (\r\n    <div className=\"board-panel-score-bonus-earned\">\r\n      <span>+{BONUS_VALUE}</span>\r\n      <Icon type=\"check\" fill=\"#fdb823\" />\r\n    </div>\r\n  );\r\n  \r\n  const BoardScore = ({ players }: { players: Player[] }) => (\r\n    <div className=\"board-panel-score\">\r\n      <BoardScoreBonus />\r\n      <div className=\"board-panel-score-items\">\r\n        {players.map(({ id, isBonusEarned, scoreBoard }) =>\r\n          isBonusEarned ? (\r\n            <BoardBonusEarned key={id} />\r\n          ) : (\r\n            <BoardScoreItem value={scoreBoard.UPPER_SECTION ?? 0} key={id} />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\nexport default React.memo(BoardScore);","import \"./styles.css\";\r\nimport { useInterval } from \"../../../../hooks\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ScoreCounterProps {\r\n  score: number;\r\n  className?: string;\r\n  index?: number;\r\n  intervalTime?: number;\r\n  handleEndTimer?: (index?: number) => void;\r\n}\r\n\r\nconst ScoreCounter = ({\r\n  score = 0,\r\n  className = \"\",\r\n  index = 0,\r\n  intervalTime = 50,\r\n  handleEndTimer,\r\n}: ScoreCounterProps) => {\r\n  const [finalScore, setFinalScore] = useState(0);\r\n  const [initialScore, setinItialScore] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  /**\r\n   * Efecto que se ejecuta cuando el valor del score cambia\r\n   * Se valida si es difernete al score actual que tiene el componente\r\n   */\r\n  useEffect(() => {\r\n    if (score !== finalScore) {\r\n      setFinalScore(score);\r\n      setIsRunning(true);\r\n    }\r\n  }, [finalScore, score]);\r\n\r\n  useInterval(\r\n    () => {\r\n      const newInitialScore = initialScore + 1;\r\n      setinItialScore(newInitialScore);\r\n\r\n      if (newInitialScore === finalScore) {\r\n        setIsRunning(false);\r\n        handleEndTimer && handleEndTimer(index);\r\n      }\r\n    },\r\n    isRunning ? intervalTime : null\r\n  );\r\n\r\n  return (\r\n    <div className={`${className} ${isRunning ? \"score-counter\" : \"\"}`}>\r\n      {initialScore}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ScoreCounter);","import \"./styles.css\";\r\nimport { BoardItem } from \"../game/components/board/components\";\r\nimport { randomNumber } from \"../../utils/helpers\";\r\nimport React, { useState } from \"react\";\r\nimport type { valueDice } from \"../../interfaces\";\r\n\r\nconst Logo = () => {\r\n  const [diceValue] = useState(randomNumber(1, 6));\r\n\r\n  return (\r\n    <div className=\"logo\">\r\n      <h1 className=\"logo-label\">YATZY</h1>\r\n      <div className=\"logo-dices\">\r\n        {new Array(5).fill(null).map((_, index) => (\r\n          <BoardItem key={index} value={diceValue as valueDice} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Logo);","import \"./styles.css\";\r\nimport { ButtonGroup, PageWrapper } from \"../wrappers\";\r\nimport { EDifficulty } from \"../../utils/constants\";\r\nimport Logo from \"../logo\";\r\nimport React from \"react\";\r\nimport type { Difficulty } from \"../../interfaces\";\r\n\r\ninterface GameDifficultyProps {\r\n  handleDifficulty: (difficulty: Difficulty) => void;\r\n}\r\n\r\nconst GameDifficulty = ({ handleDifficulty }: GameDifficultyProps) => (\r\n  <PageWrapper>\r\n    <div className=\"game-difficulty\">\r\n      <Logo />\r\n      <ButtonGroup label=\"Dificultad\">\r\n        <div className=\"game-difficulty-buttons\">\r\n          {Object.keys(EDifficulty).map((difficulty) => (\r\n            <button\r\n              className=\"button orange\"\r\n              key={difficulty}\r\n              title={difficulty}\r\n              onClick={() => handleDifficulty(difficulty as Difficulty)}\r\n            >\r\n              {difficulty}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </ButtonGroup>\r\n    </div>\r\n  </PageWrapper>\r\n);\r\n\r\nexport default React.memo(GameDifficulty);","import React, { Suspense, lazy, useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Difficulty, TotalPlayers, TypeGame } from \"../interfaces\";\r\nimport { ETypeGame } from \"../utils/constants\";\r\nimport { randomNumber } from \"../utils/helpers\";\r\nimport Loading from \"../components/loading\";\r\nimport GameDifficulty from \"../components/gameDifficulty\";\r\nimport UserContext from \"../provider/userContext\";\r\n\r\nconst Game = lazy(() => import(\"../components/game\"));\r\n\r\nconst GamePage = () => {\r\n\r\n    const [difficulty, setDifficulty] = useState<Difficulty | undefined>(\r\n        undefined\r\n      );\r\n\r\n    const state = useContext(UserContext);\r\n    // Se extrae el tipo de juego de la URL\r\n    const { type } = useParams();\r\n\r\n    // Se convierte a mayúsculas para que coincida con el tipo\r\n    const typeURL = (type?.toUpperCase() as TypeGame) || ETypeGame.SOLO;\r\n\r\n    // Se valida que el tipo exista\r\n    const validate = Object.keys(ETypeGame).includes(typeURL)\r\n    ? typeURL\r\n    : ETypeGame.SOLO;\r\n\r\n    // Se valida que el tipo no sea online\r\n    const typeGame = validate !== ETypeGame.ONLINE ? validate : ETypeGame.SOLO;\r\n\r\n    // Para indicar el turno inicial\r\n    const initialTurn =\r\n    typeGame !== ETypeGame.SOLO ? (randomNumber(1, 2) as TotalPlayers) : 1;\r\n\r\n    const authUser = state?.isAuth ? state.user || {} : {};\r\n\r\n     // Si es de tipo bot, se renderiza un componente,\r\n    // que permite al usuario elegir el nivel de dificultad...\r\n    if (!difficulty && typeGame === ETypeGame.BOT) {\r\n        return (\r\n            <GameDifficulty handleDifficulty={(value) => setDifficulty(value)} />\r\n        );\r\n  }\r\n\r\n    return (\r\n        <Suspense fallback={<Loading/>}>\r\n            <Game \r\n            authUser={authUser}\r\n            typeGame={typeGame} \r\n            initialTurn={initialTurn}\r\n            difficulty={difficulty}\r\n            />\r\n        </Suspense>);\r\n};\r\n\r\nexport default React.memo(GamePage);"],"names":["LOWER_SECTION_OPTIONS","THREE_KIND","FOUR_KIND","FULL_HOUSE","_jsx","Icon","type","fill","SMALL_STRAIGHT","_jsxs","className","children","LARGE_STRAIGHT","YATZY","CHANCE","Item","_ref","label","size","EItemType","UPPER_SECTION","value","concat","toLowerCase","style","width","height","title","toString","LOWER_SECTION","React","BoardWrapper","BoardItem","typeGame","ETypeGame","SOLO","LABELS_GAME","BOT","ONLINE","THEM","PLAYER2","BoardHeader","_ref2","DEFUAL_LABELS_HEADER","map","key","BoardTable","items","players","thrownDice","turn","handleClick","Array","_","index","BoardRows","item","BoardScore","BoardRowsButton","player","isSelected","isUsed","temporal","isBonusYatzy","score","disabledButton","valueDisplay","usedItemClass","activeItemClass","selectedItemClass","disabled","onClick","YATZY_SCORES","extProps","BoardScoreBonus","BONUS","BONUS_VALUE","BoardScoreItem","ScoreCounter","MIN_SCORE_BONUS","BoardBonusEarned","_ref3","_scoreBoard$UPPER_SEC","id","isBonusEarned","scoreBoard","intervalTime","handleEndTimer","finalScore","setFinalScore","useState","initialScore","setinItialScore","isRunning","setIsRunning","useEffect","useInterval","newInitialScore","Logo","diceValue","randomNumber","GameDifficulty","handleDifficulty","PageWrapper","ButtonGroup","Object","keys","EDifficulty","difficulty","Game","lazy","GamePage","setDifficulty","undefined","state","useContext","UserContext","useParams","typeURL","toUpperCase","validate","includes","initialTurn","authUser","isAuth","user","Suspense","fallback","Loading"],"sourceRoot":""}