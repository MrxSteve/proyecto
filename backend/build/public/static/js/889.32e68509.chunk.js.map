{"version":3,"file":"static/js/889.32e68509.chunk.js","mappings":"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","sources":["components/share/helpers.ts","components/share/modal/components/buttons/index.tsx","components/share/modal/components/header/index.tsx","components/share/modal/index.tsx","components/share/index.tsx"],"sourcesContent":["import swal from \"sweetalert\";\r\n\r\nexport interface ShareData {\r\n  title: string;\r\n  text: string;\r\n  url: string;\r\n}\r\n\r\nexport const successMessage = () => {\r\n  swal({\r\n    title: \"Gracias por compartir :D!\",\r\n    closeOnEsc: false,\r\n    icon: \"success\",\r\n    timer: 3000,\r\n  });\r\n};\r\n\r\nexport const shareLink = (data: ShareData) => {\r\n  navigator\r\n    .share(data)\r\n    .then((_) => successMessage())\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Error\",\r\n        text: \"algo salio mal :(\",\r\n        closeOnEsc: false,\r\n        icon: \"error\",\r\n      });\r\n    });\r\n};","import \"./styles.css\";\r\nimport { ShareData } from \"../../../helpers\";\r\nimport React from \"react\";\r\nimport Icon, { TypeIcon } from \"../../../../game/components/icon\";\r\nimport { copyToClipboard } from \"../../../../../utils/helpers\";\r\n\r\ntype TButtons = {\r\n  icon: TypeIcon;\r\n  label: string;\r\n  action: string;\r\n  url?: string;\r\n};\r\n\r\nconst BUTTONS: TButtons[] = [\r\n  {\r\n    icon: \"copy\",\r\n    label: \"Copy\",\r\n    action: \"copy\",\r\n  },\r\n  {\r\n    icon: \"twitter\",\r\n    label: \"Twitter\",\r\n    action: \"twitter\",\r\n    url: \"https://twitter.com/intent/tweet?text=DATA_TEXT&url=DATA_URL\",\r\n  },\r\n  {\r\n    icon: \"facebook\",\r\n    label: \"Facebook\",\r\n    action: \"facebook\",\r\n    url: \"https://www.facebook.com/sharer/sharer.php?u=DATA_URL&quote=DATA_TEXT\",\r\n  },\r\n  {\r\n    icon: \"linkedin\",\r\n    label: \"Linkedin\",\r\n    action: \"linkedin\",\r\n    url: \"https://www.linkedin.com/shareArticle?mini=true&url=DATA_URL&title=DATA_TITLE&summary=DATA_TEXT&source=LinkedIn\",\r\n  },\r\n];\r\n\r\ninterface ModalShareButtonsProps {\r\n  data: ShareData;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}\r\n\r\nconst ModalShareButtons = ({ data, onCloseModal }: ModalShareButtonsProps) => {\r\n  const handleClick = (button: TButtons) => {\r\n    if (button.action === \"copy\") {\r\n      copyToClipboard(`${data.text} ${data.url}`);\r\n    } else {\r\n      let url = button.url;\r\n      // Se itera la data y se reemplza en la url a compartir\r\n      Object.keys(data).forEach(\r\n        (v) =>\r\n          (url = url?.replace(\r\n            `DATA_${v.toUpperCase()}`,\r\n            encodeURIComponent(data[v as keyof ShareData])\r\n          ))\r\n      );\r\n\r\n      // Una vez se tiene la url se abre en una nueva ventana/pesta침a\r\n      window.open(url, \"_blank\");\r\n    }\r\n\r\n    onCloseModal && onCloseModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-share-buttons\">\r\n      {BUTTONS.map((button) => (\r\n        <div className=\"modal-share-button\" key={button.icon}>\r\n          <button onClick={() => handleClick(button)}>\r\n            <Icon type={button.icon} fill=\"black\" />\r\n          </button>\r\n          <span>{button.label}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModalShareButtons);","import Icon from \"../../../../game/components/icon\";\r\nimport \"./styles.css\";\r\nimport React from \"react\";\r\n\r\nconst ModalShareHeader = ({\r\n  label = \"Share...\",\r\n  onCloseModal,\r\n}: {\r\n  label?: string;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}) => (\r\n  <div className=\"modal-share-header\">\r\n    <h4>{label}</h4>\r\n    <button onClick={() => onCloseModal()}>\r\n      <Icon type=\"close\" fill=\"black\" />\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default React.memo(ModalShareHeader);","import \"./styles.css\";\r\nimport { $ } from \"../../../utils/helpers\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { ModalShareButtons, ModalShareHeader } from \"./components\";\r\nimport { ShareData } from \"../helpers\";\r\nimport FocusTrap from \"focus-trap-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ModalShareProps {\r\n  data: ShareData;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}\r\n\r\nconst NAME_ELEMENT = \"overlay-share\";\r\n\r\nconst Modal = (props: ModalShareProps) => {\r\n  const [element, setElement] = useState<Element | null>();\r\n\r\n  /**\r\n   * Efecto que crea y elimina el elemento para el portal...\r\n   */\r\n  useEffect(() => {\r\n    if (!element) {\r\n      if (!$(`#${NAME_ELEMENT}`)) {\r\n        const newElement = document.createElement(\"div\");\r\n        newElement.id = NAME_ELEMENT;\r\n        $(\".screen\")?.appendChild(newElement);\r\n        setElement(newElement);\r\n      } else {\r\n        setElement($(`#${NAME_ELEMENT}`));\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (element && $(\".screen\")) {\r\n        $(\".screen\")?.removeChild(element);\r\n      }\r\n    };\r\n  }, [element]);\r\n\r\n  return element\r\n    ? createPortal(\r\n        <FocusTrap>\r\n          <div className=\"modal-share-wrapper\">\r\n            <ModalShareHeader onCloseModal={props.onCloseModal} />\r\n            <ModalShareButtons {...props} />\r\n          </div>\r\n        </FocusTrap>,\r\n        element\r\n      )\r\n    : null;\r\n};\r\n\r\nexport default React.memo(Modal);","import { shareLink, ShareData, successMessage } from \"./helpers\";\r\nimport Modal from \"./modal\";\r\nimport React, { useState } from \"react\";\r\n\r\n// Valida si el bowser soporta la opci칩n de compartir\r\nconst SHARE_AVAILABLE = \"share\" in navigator;\r\n\r\ninterface ShareProps {\r\n  children: JSX.Element;\r\n  data: ShareData;\r\n  useNativeOption?: boolean;\r\n}\r\n\r\nconst Share = ({ children, data, useNativeOption = true }: ShareProps) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const onClick = () => {\r\n    if (SHARE_AVAILABLE && useNativeOption) {\r\n      shareLink(data);\r\n    } else {\r\n      setIsVisible(true);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = (isShare = false) => {\r\n    if (isShare) {\r\n      successMessage();\r\n    }\r\n\r\n    setIsVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* Se le adiciona el evento onclick al elemento */}\r\n      {React.cloneElement(children, { onClick })}\r\n      {/* \r\n        Si no est치 disponible la opci칩n del share en el navegador\r\n        se inyecta el modal personalizado\r\n      */}\r\n      {isVisible && <Modal data={data} onCloseModal={onCloseModal} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(Share);"],"names":["successMessage","swal","title","closeOnEsc","icon","timer","BUTTONS","label","action","url","ModalShareButtons","_ref","data","onCloseModal","_jsx","className","children","map","button","_jsxs","onClick","copyToClipboard","concat","text","Object","keys","forEach","v","_url","replace","toUpperCase","encodeURIComponent","window","open","handleClick","Icon","type","fill","React","ModalShareHeader","NAME_ELEMENT","Modal","props","element","setElement","useState","useEffect","$","_$","newElement","document","createElement","id","appendChild","_$2","removeChild","createPortal","FocusTrap","SHARE_AVAILABLE","navigator","Share","useNativeOption","isVisible","setIsVisible","share","then","_","catch","shareLink","arguments","length","undefined"],"sourceRoot":""}