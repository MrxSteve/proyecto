{"version":3,"file":"static/js/989.9871f227.chunk.js","mappings":"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","sources":["components/avatarImage/index.tsx","components/game/components/board/components/item/helpers.tsx","components/game/components/board/components/item/index.tsx","components/game/components/board/components/wrapper/index.tsx","components/game/components/board/components/header/index.tsx","components/game/components/board/components/table/index.tsx","components/game/components/board/components/rows/index.tsx","components/game/components/board/components/score/index.tsx","components/game/components/scoreCounter/index.tsx","components/logo/index.tsx","components/share/helpers.ts","components/share/modal/components/buttons/index.tsx","components/share/modal/components/header/index.tsx","components/share/modal/index.tsx","components/share/index.tsx","components/lobbyGame/components/links/index.tsx","components/lobbyGame/components/options/index.tsx","components/lobbyGame/index.tsx","pages/lobby.tsx"],"sourcesContent":["import \"./styles.css\";\r\nimport defaulImage from \"./default.png\";\r\nimport React from \"react\";\r\n\r\ninterface AvatarImageProps {\r\n  photo: string;\r\n  name: string;\r\n}\r\n\r\nconst AvatarImage = ({ photo = \"\", name = \"\" }: AvatarImageProps) => {\r\n  return (\r\n    <img\r\n      alt=\"Avatar\"\r\n      className=\"avatar-image\"\r\n      src={photo || defaulImage}\r\n      title={name}\r\n      onError={({ currentTarget }) => {\r\n        currentTarget.onerror = null;\r\n        currentTarget.src = defaulImage;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(AvatarImage);","import type { CategoriesType } from \"../../../../../../interfaces\";\r\nimport Icon from \"../../../icon\";\r\n\r\n// Renderizando iconos y texto\r\nexport const LOWER_SECTION_OPTIONS: Record<\r\n  CategoriesType,\r\n  JSX.Element | string\r\n> = {\r\n  THREE_KIND: \"3x\",\r\n  FOUR_KIND: \"4x\",\r\n  FULL_HOUSE: <Icon type=\"full-house\" fill=\"white\" />,\r\n  SMALL_STRAIGHT: (\r\n    <div className=\"board-item-straight\">\r\n      <Icon type=\"cards\" fill=\"white\" />\r\n      <div>Small</div>\r\n    </div>\r\n  ),\r\n  LARGE_STRAIGHT: (\r\n    <div className=\"board-item-straight\">\r\n      <Icon type=\"cards\" fill=\"white\" />\r\n      <div>Large</div>\r\n    </div>\r\n  ),\r\n  YATZY: <div className=\"board-item-yatzy\">Yatzy</div>,\r\n  CHANCE: \"?\",\r\n};","import \"./styles.css\"\r\nimport React from \"react\";\r\nimport type { CategoriesType, ItemType, valueDice } from \"../../../../../../interfaces\";\r\nimport { LOWER_SECTION_OPTIONS } from \"./helpers\";\r\nimport { EItemType } from \"../../../../../../utils/constants\";\r\n//import { EItemType } from \"../../../../../../utils/constants\";\r\n\r\ninterface ItemProps {\r\n    label?: string; //opcional\r\n    size?: number; //opcional\r\n    type?: ItemType; //requerido?\r\n    value: valueDice | CategoriesType; //requerido\r\n}\r\n\r\nconst Item = ({\r\n    label = \"\",\r\n    size = 50,\r\n    type = EItemType.UPPER_SECTION,\r\n    value = 1,\r\n}: ItemProps) => (\r\n    <div\r\n    className={`board-item ${type.toLowerCase()} ${\r\n        type === EItemType.UPPER_SECTION ? `dice-${value}` : \"\"\r\n      }`}       \r\n    style={{width: size, height: size}} // le pasamos el valor del size arriba\r\n    title={label || value.toString()}\r\n    >\r\n        {type === EItemType.LOWER_SECTION && \r\n        LOWER_SECTION_OPTIONS [value as CategoriesType]}\r\n    </div>\r\n    );\r\n\r\nexport default React.memo(Item);","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\ninterface WrapperProps {\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\n\r\nconst BoardWrapper = ({ children }: WrapperProps) => (\r\n  <div className=\"board-wrapper\">{children}</div>\r\n);\r\n\r\nexport default React.memo(BoardWrapper);","import \"./styles.css\"\r\nimport { TypeGame } from '../../../../../../interfaces/index';\r\nimport { DEFUAL_LABELS_HEADER, ETypeGame, LABELS_GAME } from '../../../../../../utils/constants';\r\nimport React from \"react\";\r\n\r\ninterface BoardItemProps {\r\n    label: string;\r\n    typeGame: TypeGame;\r\n}\r\n\r\nconst BoardItem = ({\r\n    label = \"\",\r\n    typeGame = ETypeGame.SOLO,\r\n  }: BoardItemProps) => (\r\n    <div className=\"board-header-panel\">\r\n      {typeGame === ETypeGame.SOLO ? (\r\n        label\r\n      ) : (\r\n        <div className=\"board-header-panel-player\">\r\n          <div>\r\n            {\r\n              LABELS_GAME[\r\n                typeGame === ETypeGame.BOT || typeGame === ETypeGame.ONLINE\r\n                  ? \"YOU\"\r\n                  : \"PLAYER1\"\r\n              ]\r\n            }\r\n          </div>\r\n          <div>\r\n            {typeGame === ETypeGame.BOT\r\n              ? LABELS_GAME.BOT\r\n              : typeGame === ETypeGame.ONLINE\r\n              ? LABELS_GAME.THEM\r\n              : LABELS_GAME.PLAYER2}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n\r\n  const BoardHeader = ({ typeGame = ETypeGame.SOLO }: { typeGame: TypeGame }) => (\r\n    <div className=\"board-header\">\r\n      {DEFUAL_LABELS_HEADER.map((label, key) => (\r\n        <BoardItem key={key} label={label} typeGame={typeGame} />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\nexport default React.memo(BoardHeader);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport type { IBoard, IBoardItem, Player, TotalPlayers, TypeGame } from \"../../../../../../interfaces\";\r\nimport { ETypeGame } from \"../../../../../../utils/constants\";\r\nimport { BoardRows, BoardScore } from \"..\";\r\n\r\ninterface BoardTableProps {\r\n    items: IBoard;\r\n    players: Player[];\r\n    thrownDice?: boolean;\r\n    turn?: TotalPlayers;\r\n    typeGame?: TypeGame;\r\n    handleClick: (item: IBoardItem, player: TotalPlayers) => void;\r\n  }\r\n\r\n  const BoardTable = ({\r\n    items,\r\n    players,\r\n    thrownDice = false,\r\n    turn = 1,\r\n    typeGame = ETypeGame.SOLO,\r\n    handleClick,\r\n  }: BoardTableProps) => (\r\n    <div className=\"board-table-row-wrapper\">\r\n      {new Array(7).fill(null).map((_, index) => (\r\n        <div className=\"board-table-row\" key={index}>\r\n          <div className=\"board-table-row-item\">\r\n            {index < 6 ? (\r\n              <BoardRows\r\n                item={items.UPPER_SECTION[index]}\r\n                thrownDice={thrownDice}\r\n                turn={turn}\r\n                typeGame={typeGame}\r\n                handleClick={handleClick}\r\n              />\r\n            ) : (\r\n              <BoardScore players={players} />\r\n            )}\r\n          </div>\r\n          <div className=\"board-table-row-item\">\r\n            <BoardRows\r\n              item={items.LOWER_SECTION[index]}\r\n              thrownDice={thrownDice}\r\n              turn={turn}\r\n              typeGame={typeGame}\r\n              handleClick={handleClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n\r\nexport default React.memo(BoardTable);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { IBoardItem, TotalPlayers, TypeGame } from \"../../../../../../interfaces\";\r\nimport { ETypeGame, YATZY_SCORES } from \"../../../../../../utils/constants\";\r\nimport { BoardItem } from \"..\";\r\nimport { disable } from \"workbox-navigation-preload\";\r\n\r\ninterface BoardRowsProps {\r\n    item: IBoardItem;\r\n    thrownDice?: boolean;\r\n    typeGame?: TypeGame;\r\n    turn?: TotalPlayers;\r\n    handleClick: (item: IBoardItem, player: TotalPlayers) => void;\r\n  }\r\n\r\n  interface BoardRowsButtonProps extends Omit<BoardRowsProps, \"typeGame\"> {\r\n    player: TotalPlayers;\r\n  }\r\n  \r\n  const BoardRowsButton = ({\r\n    item,\r\n    thrownDice = false,\r\n    turn = 1,\r\n    player = 1,\r\n    handleClick,\r\n  }: BoardRowsButtonProps) => {\r\n    const { isSelected, isUsed, temporal, value, isBonusYatzy } =\r\n    item.score[player - 1];\r\n\r\n    // Dependiendo del estado, se bloqueará el botón...\r\n    const disabledButton = !(turn === player && thrownDice && !isUsed);\r\n\r\n    // Dependiendo del estado se valida el valor que se mostrará en la casilla.\r\n    const valueDisplay =\r\n        (thrownDice && turn === player) || isUsed\r\n            ? isUsed\r\n            ? value\r\n            : temporal\r\n        : \"\";\r\n\r\n    // Para renderizar dinamicamente el title\r\n    const title = item.label + (valueDisplay !== \"\" ? ` = ${valueDisplay}` : \"\");\r\n\r\n    // La clase que se establece cuando un ítem ha sido seleccionado,\r\n    // o que potencialmente puede ser usado.\r\n    const usedItemClass = isUsed ? \"used-score\" : turn === player ? \"turn\" : \"\";\r\n\r\n    // Clase que muestra que la casilla está activada y puede ser seleccionada\r\n    const activeItemClass =\r\n        turn === player && thrownDice ? (isUsed ? \"used\" : \"active\") : \"\";\r\n\r\n    // Muestra que el ítem se ha seleccionado...\r\n    const selectedItemClass = isSelected ? \"selected\" : \"\";\r\n\r\n    return (\r\n        <button\r\n        title={title}\r\n        disabled={disabledButton}\r\n        className={`board-panel-row-score-button ${usedItemClass} ${activeItemClass} ${selectedItemClass}`}\r\n        onClick={() => handleClick(item, player)}\r\n        >\r\n        {valueDisplay}\r\n        {/* Se muestra que se tiene una bonificación por hacer múltiples Yanzyes */}\r\n        {isBonusYatzy && <span>{YATZY_SCORES.YATZY}</span>}\r\n    </button>\r\n    )\r\n  }\r\n  \r\n  const BoardRows = ({\r\n    item,\r\n    thrownDice = false,\r\n    typeGame = ETypeGame.SOLO,\r\n    turn = 1,\r\n    handleClick,\r\n  }: BoardRowsProps) => {\r\n    const extProps = { item, thrownDice, turn, handleClick };\r\n  \r\n    return (\r\n      <div className=\"board-panel-row-category\">\r\n        <div className=\"board-panel-row-item\">\r\n          <BoardItem type={item.type} value={item.value} label={item.label} />\r\n        </div>\r\n        <div className=\"board-panel-row-score\">\r\n          <BoardRowsButton {...extProps} player={1} />\r\n          {typeGame === ETypeGame.SOLO ? (\r\n            <div className=\"board-panel-row-score-label\">{item.label}</div>\r\n          ) : (\r\n            <BoardRowsButton {...extProps} player={2} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default React.memo(BoardRows);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { Player } from \"../../../../../../interfaces\";\r\nimport { BONUS_VALUE, LABELS_GAME, MIN_SCORE_BONUS } from \"../../../../../../utils/constants\";\r\nimport Icon from \"../../../icon\";\r\nimport ScoreCounter from \"../../../scoreCounter\";\r\n\r\nconst BoardScoreBonus = () => (\r\n    <div className=\"board-panel-score-bonus\">\r\n      <div>{LABELS_GAME.BONUS}</div>\r\n      <div>+{BONUS_VALUE}</div>\r\n    </div>\r\n  );\r\n  \r\n  const BoardScoreItem = ({ value = 0 }: { value: number }) => (\r\n    <div className=\"board-panel-score-item\">\r\n      <ScoreCounter score={value} className=\"board-panel-score-item-score\" />\r\n      <div className=\"board-panel-score-item-bonus\">/{MIN_SCORE_BONUS}</div>\r\n    </div>\r\n  );\r\n  \r\n  const BoardBonusEarned = () => (\r\n    <div className=\"board-panel-score-bonus-earned\">\r\n      <span>+{BONUS_VALUE}</span>\r\n      <Icon type=\"check\" fill=\"#fdb823\" />\r\n    </div>\r\n  );\r\n  \r\n  const BoardScore = ({ players }: { players: Player[] }) => (\r\n    <div className=\"board-panel-score\">\r\n      <BoardScoreBonus />\r\n      <div className=\"board-panel-score-items\">\r\n        {players.map(({ id, isBonusEarned, scoreBoard }) =>\r\n          isBonusEarned ? (\r\n            <BoardBonusEarned key={id} />\r\n          ) : (\r\n            <BoardScoreItem value={scoreBoard.UPPER_SECTION ?? 0} key={id} />\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\nexport default React.memo(BoardScore);","import \"./styles.css\";\r\nimport { useInterval } from \"../../../../hooks\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ScoreCounterProps {\r\n  score: number;\r\n  className?: string;\r\n  index?: number;\r\n  intervalTime?: number;\r\n  handleEndTimer?: (index?: number) => void;\r\n}\r\n\r\nconst ScoreCounter = ({\r\n  score = 0,\r\n  className = \"\",\r\n  index = 0,\r\n  intervalTime = 50,\r\n  handleEndTimer,\r\n}: ScoreCounterProps) => {\r\n  const [finalScore, setFinalScore] = useState(0);\r\n  const [initialScore, setinItialScore] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  /**\r\n   * Efecto que se ejecuta cuando el valor del score cambia\r\n   * Se valida si es difernete al score actual que tiene el componente\r\n   */\r\n  useEffect(() => {\r\n    if (score !== finalScore) {\r\n      setFinalScore(score);\r\n      setIsRunning(true);\r\n    }\r\n  }, [finalScore, score]);\r\n\r\n  useInterval(\r\n    () => {\r\n      const newInitialScore = initialScore + 1;\r\n      setinItialScore(newInitialScore);\r\n\r\n      if (newInitialScore === finalScore) {\r\n        setIsRunning(false);\r\n        handleEndTimer && handleEndTimer(index);\r\n      }\r\n    },\r\n    isRunning ? intervalTime : null\r\n  );\r\n\r\n  return (\r\n    <div className={`${className} ${isRunning ? \"score-counter\" : \"\"}`}>\r\n      {initialScore}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ScoreCounter);","import \"./styles.css\";\r\nimport { BoardItem } from \"../game/components/board/components\";\r\nimport { randomNumber } from \"../../utils/helpers\";\r\nimport React, { useState } from \"react\";\r\nimport type { valueDice } from \"../../interfaces\";\r\n\r\nconst Logo = () => {\r\n  const [diceValue] = useState(randomNumber(1, 6));\r\n\r\n  return (\r\n    <div className=\"logo\">\r\n      <h1 className=\"logo-label\">YATZY</h1>\r\n      <div className=\"logo-dices\">\r\n        {new Array(5).fill(null).map((_, index) => (\r\n          <BoardItem key={index} value={diceValue as valueDice} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Logo);","import swal from \"sweetalert\";\r\n\r\nexport interface ShareData {\r\n  title: string;\r\n  text: string;\r\n  url: string;\r\n}\r\n\r\nexport const successMessage = () => {\r\n  swal({\r\n    title: \"Gracias por compartir :D!\",\r\n    closeOnEsc: false,\r\n    icon: \"success\",\r\n    timer: 3000,\r\n  });\r\n};\r\n\r\nexport const shareLink = (data: ShareData) => {\r\n  navigator\r\n    .share(data)\r\n    .then((_) => successMessage())\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Error\",\r\n        text: \"algo salio mal :(\",\r\n        closeOnEsc: false,\r\n        icon: \"error\",\r\n      });\r\n    });\r\n};","import \"./styles.css\";\r\nimport { ShareData } from \"../../../helpers\";\r\nimport React from \"react\";\r\nimport Icon, { TypeIcon } from \"../../../../game/components/icon\";\r\nimport { copyToClipboard } from \"../../../../../utils/helpers\";\r\n\r\ntype TButtons = {\r\n  icon: TypeIcon;\r\n  label: string;\r\n  action: string;\r\n  url?: string;\r\n};\r\n\r\nconst BUTTONS: TButtons[] = [\r\n  {\r\n    icon: \"copy\",\r\n    label: \"Copy\",\r\n    action: \"copy\",\r\n  },\r\n  {\r\n    icon: \"twitter\",\r\n    label: \"Twitter\",\r\n    action: \"twitter\",\r\n    url: \"https://twitter.com/intent/tweet?text=DATA_TEXT&url=DATA_URL\",\r\n  },\r\n  {\r\n    icon: \"facebook\",\r\n    label: \"Facebook\",\r\n    action: \"facebook\",\r\n    url: \"https://www.facebook.com/sharer/sharer.php?u=DATA_URL&quote=DATA_TEXT\",\r\n  },\r\n  {\r\n    icon: \"linkedin\",\r\n    label: \"Linkedin\",\r\n    action: \"linkedin\",\r\n    url: \"https://www.linkedin.com/shareArticle?mini=true&url=DATA_URL&title=DATA_TITLE&summary=DATA_TEXT&source=LinkedIn\",\r\n  },\r\n];\r\n\r\ninterface ModalShareButtonsProps {\r\n  data: ShareData;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}\r\n\r\nconst ModalShareButtons = ({ data, onCloseModal }: ModalShareButtonsProps) => {\r\n  const handleClick = (button: TButtons) => {\r\n    if (button.action === \"copy\") {\r\n      copyToClipboard(`${data.text} ${data.url}`);\r\n    } else {\r\n      let url = button.url;\r\n      // Se itera la data y se reemplza en la url a compartir\r\n      Object.keys(data).forEach(\r\n        (v) =>\r\n          (url = url?.replace(\r\n            `DATA_${v.toUpperCase()}`,\r\n            encodeURIComponent(data[v as keyof ShareData])\r\n          ))\r\n      );\r\n\r\n      // Una vez se tiene la url se abre en una nueva ventana/pestaña\r\n      window.open(url, \"_blank\");\r\n    }\r\n\r\n    onCloseModal && onCloseModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-share-buttons\">\r\n      {BUTTONS.map((button) => (\r\n        <div className=\"modal-share-button\" key={button.icon}>\r\n          <button onClick={() => handleClick(button)}>\r\n            <Icon type={button.icon} fill=\"black\" />\r\n          </button>\r\n          <span>{button.label}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModalShareButtons);","import Icon from \"../../../../game/components/icon\";\r\nimport \"./styles.css\";\r\nimport React from \"react\";\r\n\r\nconst ModalShareHeader = ({\r\n  label = \"Share...\",\r\n  onCloseModal,\r\n}: {\r\n  label?: string;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}) => (\r\n  <div className=\"modal-share-header\">\r\n    <h4>{label}</h4>\r\n    <button onClick={() => onCloseModal()}>\r\n      <Icon type=\"close\" fill=\"black\" />\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default React.memo(ModalShareHeader);","import \"./styles.css\";\r\nimport { $ } from \"../../../utils/helpers\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { ModalShareButtons, ModalShareHeader } from \"./components\";\r\nimport { ShareData } from \"../helpers\";\r\nimport FocusTrap from \"focus-trap-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ModalShareProps {\r\n  data: ShareData;\r\n  onCloseModal: (isShare?: boolean) => void;\r\n}\r\n\r\nconst NAME_ELEMENT = \"overlay-share\";\r\n\r\nconst Modal = (props: ModalShareProps) => {\r\n  const [element, setElement] = useState<Element | null>();\r\n\r\n  /**\r\n   * Efecto que crea y elimina el elemento para el portal...\r\n   */\r\n  useEffect(() => {\r\n    if (!element) {\r\n      if (!$(`#${NAME_ELEMENT}`)) {\r\n        const newElement = document.createElement(\"div\");\r\n        newElement.id = NAME_ELEMENT;\r\n        $(\".screen\")?.appendChild(newElement);\r\n        setElement(newElement);\r\n      } else {\r\n        setElement($(`#${NAME_ELEMENT}`));\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (element && $(\".screen\")) {\r\n        $(\".screen\")?.removeChild(element);\r\n      }\r\n    };\r\n  }, [element]);\r\n\r\n  return element\r\n    ? createPortal(\r\n        <FocusTrap>\r\n          <div className=\"modal-share-wrapper\">\r\n            <ModalShareHeader onCloseModal={props.onCloseModal} />\r\n            <ModalShareButtons {...props} />\r\n          </div>\r\n        </FocusTrap>,\r\n        element\r\n      )\r\n    : null;\r\n};\r\n\r\nexport default React.memo(Modal);","import { shareLink, ShareData, successMessage } from \"./helpers\";\r\nimport Modal from \"./modal\";\r\nimport React, { useState } from \"react\";\r\n\r\n// Valida si el bowser soporta la opción de compartir\r\nconst SHARE_AVAILABLE = \"share\" in navigator;\r\n\r\ninterface ShareProps {\r\n  children: JSX.Element;\r\n  data: ShareData;\r\n  useNativeOption?: boolean;\r\n}\r\n\r\nconst Share = ({ children, data, useNativeOption = true }: ShareProps) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const onClick = () => {\r\n    if (SHARE_AVAILABLE && useNativeOption) {\r\n      shareLink(data);\r\n    } else {\r\n      setIsVisible(true);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = (isShare = false) => {\r\n    if (isShare) {\r\n      successMessage();\r\n    }\r\n\r\n    setIsVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* Se le adiciona el evento onclick al elemento */}\r\n      {React.cloneElement(children, { onClick })}\r\n      {/* \r\n        Si no está disponible la opción del share en el navegador\r\n        se inyecta el modal personalizado\r\n      */}\r\n      {isVisible && <Modal data={data} onCloseModal={onCloseModal} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default React.memo(Share);","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { ButtonGroup } from \"../../../wrappers\";\r\nimport { Link } from \"react-router-dom\";\r\nimport state from \"sweetalert/typings/modules/state\";\r\nimport type { IAuth } from \"../../../../interfaces\";\r\n\r\nconst LINKS = [\r\n    {\r\n      label: \"Entrenamiento\",\r\n      path: \"/game/solo\",\r\n    },\r\n    {\r\n       label: \"Online\",\r\n       path: \"/online\",\r\n    },\r\n    {\r\n      label: \"Vs Amigo \",\r\n      path: \"/game/friend\",\r\n    },\r\n    {\r\n      label: \"VS Maquina\",\r\n      path: \"/game/bot\",\r\n    },\r\n  ];\r\n\r\nconst Links = ({state} : {state:IAuth | null}) => {\r\n    return (\r\n        <div className=\"lobby-game-links\">\r\n            <ButtonGroup label=\"Play\">\r\n            <div className=\"lobby-game-links-link\">\r\n                {LINKS.map(({ label, path }, key) => {\r\n                // Valida si puede o no mostrar el link de online\r\n                // esto sucede si el api no responde, entonces el estado sería null\r\n                const renderLink =\r\n                     (label === \"Online\" && !!state) || label !== \"Online\";\r\n\r\n                return (\r\n                    <Link className=\"button orange\" key={key} to={path}>\r\n                        {label}\r\n                    </Link>\r\n                );\r\n                })}\r\n            </div>\r\n            </ButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Links);","import { Link } from \"react-router-dom\";\r\nimport Icon from \"../../../game/components/icon\";\r\nimport \"./styles.css\";\r\nimport React from \"react\";\r\nimport Share from \"../../../share\";\r\n\r\nconst dataShare = {\r\n    title: \"React Dices\",\r\n    text: \"Prueba jugar al proyecto React Dices!\",\r\n    url: window.location.origin,\r\n}\r\n\r\nconst Options = ({isAuth = false} : {isAuth : boolean}) => {\r\n    return (\r\n    <div className=\"lobby-game-options\">\r\n        <Share data={dataShare}>\r\n            <button className=\"lobby-game-options-button\" title=\"Share\">\r\n                <Icon type=\"share\" />\r\n            </button>\r\n        </Share>\r\n        <Link to=\"/about\" className=\"lobby-game-options-button\" title=\"About\">\r\n            <Icon type=\"info\" />\r\n        </Link>\r\n        {\r\n            isAuth && (\r\n                <a href=\"/api/logout\"\r\n                className=\"lobby-game-options-button\"\r\n                title=\"Log out\"\r\n                >\r\n                    <Icon type=\"logout\"/>\r\n                </a>\r\n            )\r\n        }\r\n    </div>);\r\n};\r\n\r\nexport default React.memo(Options);","import \"./styles.css\";\r\nimport React, { useContext } from \"react\";\r\nimport { PageWrapper } from \"../wrappers\";\r\nimport Logo from \"../logo\";\r\nimport Links from \"./components/links\";\r\nimport { Options } from \"./components\";\r\nimport CircularButton from \"../circularButton\";\r\nimport { useSounds } from \"../../hooks\";\r\nimport UserContext from \"../../provider/userContext\";\r\nimport AvatarImage from \"../avatarImage\";\r\nimport state from 'sweetalert/typings/modules/state';\r\n\r\nconst LobbyGame = () => {\r\n\r\n    const {withSound, toggleSound} = useSounds();\r\n    const state = useContext(UserContext);\r\n\r\n    return(\r\n        <PageWrapper showBack={false}>\r\n            <div className=\"lobby-game\">\r\n                {\r\n                    state?.isAuth && (\r\n                        <AvatarImage \r\n                        photo={state.user?.photo || \"\"}\r\n                        name={state.user?.name || \"\"}\r\n                        />\r\n                    )\r\n                }\r\n                <CircularButton \r\n                type={withSound ? \"sound-on\" : \"sound-off\"}\r\n                onClick={toggleSound}\r\n                />\r\n                <Logo/>\r\n                <Links state={state} />\r\n                <Options isAuth={state?.isAuth ?? false}/>\r\n            </div>\r\n        </PageWrapper>\r\n    ) \r\n};\r\n\r\nexport default React.memo(LobbyGame);","import React from \"react\";\r\nimport LobbyGame from \"../components/lobbyGame\";\r\n\r\nconst Lobby = () => <LobbyGame/>;\r\n\r\nexport default React.memo(Lobby);"],"names":["AvatarImage","_ref","photo","name","_jsx","alt","className","src","defaulImage","title","onError","_ref2","currentTarget","onerror","React","LOWER_SECTION_OPTIONS","THREE_KIND","FOUR_KIND","FULL_HOUSE","Icon","type","fill","SMALL_STRAIGHT","_jsxs","children","LARGE_STRAIGHT","YATZY","CHANCE","Item","label","size","EItemType","UPPER_SECTION","value","concat","toLowerCase","style","width","height","toString","LOWER_SECTION","BoardWrapper","BoardItem","typeGame","ETypeGame","SOLO","LABELS_GAME","BOT","ONLINE","THEM","PLAYER2","BoardHeader","DEFUAL_LABELS_HEADER","map","key","BoardTable","items","players","thrownDice","turn","handleClick","Array","_","index","BoardRows","item","BoardScore","BoardRowsButton","player","isSelected","isUsed","temporal","isBonusYatzy","score","disabledButton","valueDisplay","usedItemClass","activeItemClass","selectedItemClass","disabled","onClick","YATZY_SCORES","extProps","BoardScoreBonus","BONUS","BONUS_VALUE","BoardScoreItem","ScoreCounter","MIN_SCORE_BONUS","BoardBonusEarned","_ref3","_scoreBoard$UPPER_SEC","id","isBonusEarned","scoreBoard","intervalTime","handleEndTimer","finalScore","setFinalScore","useState","initialScore","setinItialScore","isRunning","setIsRunning","useEffect","useInterval","newInitialScore","Logo","diceValue","randomNumber","successMessage","swal","closeOnEsc","icon","timer","BUTTONS","action","url","ModalShareButtons","data","onCloseModal","button","copyToClipboard","text","Object","keys","forEach","v","_url","replace","toUpperCase","encodeURIComponent","window","open","ModalShareHeader","NAME_ELEMENT","Modal","props","element","setElement","$","_$","newElement","document","createElement","appendChild","_$2","removeChild","createPortal","FocusTrap","SHARE_AVAILABLE","navigator","Share","useNativeOption","isVisible","setIsVisible","share","then","catch","shareLink","arguments","length","undefined","LINKS","path","Links","state","ButtonGroup","Link","to","dataShare","location","origin","Options","isAuth","href","LobbyGame","_state$user","_state$user2","_state$isAuth","withSound","toggleSound","useSounds","useContext","UserContext","PageWrapper","showBack","user","CircularButton","Lobby"],"sourceRoot":""}