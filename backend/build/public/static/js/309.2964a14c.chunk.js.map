{"version":3,"file":"static/js/309.2964a14c.chunk.js","mappings":"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","sources":["../node_modules/focus-trap-react/dist/focus-trap-react.js","../node_modules/focus-trap/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/tabbable/src/index.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar _require = require('focus-trap'),\n  createFocusTrap = _require.createFocusTrap;\nvar _require2 = require('tabbable'),\n  isFocusable = _require2.isFocusable;\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n  var _super = _createSuper(FocusTrap);\n  function FocusTrap(props) {\n    var _this;\n    _classCallCheck(this, FocusTrap);\n    _this = _super.call(this, props);\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n        optionValue = optionValue.apply(void 0, params);\n      }\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        }\n        // else, empty string (invalid), null (invalid), 0 (invalid)\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n      return node;\n    });\n    _this.handleDeactivate = _this.handleDeactivate.bind(_assertThisInitialized(_this));\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_assertThisInitialized(_this));\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_assertThisInitialized(_this));\n\n    // focus-trap options used internally when creating the trap\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    };\n\n    // original options provided by the consumer\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    }\n\n    // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n    _this.outsideClick = null;\n\n    // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n    _this.focusTrapElements = props.containerElements || [];\n\n    // now we remember what the currently focused element is, not relying on focus-trap\n    _this.updatePreviousElement();\n    return _this;\n  }\n\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n  _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n\n    /** Update the previously focused element with the currently focused element. */\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate\n        // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n        var canReturnFocus = !!(\n        // did the consumer allow it?\n\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && (\n        // was there an outside click that allowed deactivation?\n        !_this2.outsideClick ||\n        // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation &&\n        // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions))\n\n        // if no, the restore focus to `returnFocusNode` at this point\n        );\n\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n          preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n        }\n\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (this.focusTrap) {\n        // trap already exists: it's possible we're in StrictMode and we're being remounted,\n        //  in which case, we will have deactivated the trap when we got unmounted (remember,\n        //  StrictMode, in development, purposely unmounts and remounts components after\n        //  mounting them the first time to make sure they have reusable state,\n        //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n        //  we need to restore the state of the trap according to our component state\n        // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n        //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n        //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n        //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n        //  we get remounted and we're supposed to restore state. But if you had paused,\n        //  we've now deactivated (we don't know we're amount to get remounted again)\n        //  which means we need to reactivate and then pause. Otherwise, do nothing.\n        if (this.props.active && !this.focusTrap.active) {\n          this.focusTrap.activate();\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      } else {\n        var nodesExist = this.focusTrapElements.some(Boolean);\n        if (nodesExist) {\n          // eslint-disable-next-line react/prop-types -- _createFocusTrap is an internal prop\n          this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      }\n      // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        }\n\n        // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n        var callbackRef = function callbackRef(element) {\n          var containerElements = _this3.props.containerElements;\n          if (child) {\n            if (typeof child.ref === 'function') {\n              child.ref(element);\n            } else if (child.ref) {\n              child.ref.current = element;\n            }\n          }\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n        var childWithRef = React.cloneElement(child, {\n          ref: callbackRef\n        });\n        return childWithRef;\n      }\n      return null;\n    }\n  }]);\n  return FocusTrap;\n}(React.Component); // support server-side rendering where `Element` will not be defined\nvar ElementType = typeof Element === 'undefined' ? Function : Element;\nFocusTrap.propTypes = {\n  active: PropTypes.bool,\n  paused: PropTypes.bool,\n  focusTrapOptions: PropTypes.shape({\n    document: PropTypes.object,\n    onActivate: PropTypes.func,\n    onPostActivate: PropTypes.func,\n    checkCanFocusTrap: PropTypes.func,\n    onPause: PropTypes.func,\n    onPostPause: PropTypes.func,\n    onUnpause: PropTypes.func,\n    onPostUnpause: PropTypes.func,\n    onDeactivate: PropTypes.func,\n    onPostDeactivate: PropTypes.func,\n    checkCanReturnFocus: PropTypes.func,\n    initialFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    fallbackFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string,\n    // NOTE: does not support `false` as value (or return value from function)\n    PropTypes.func]),\n    escapeDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    clickOutsideDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    returnFocusOnDeactivate: PropTypes.bool,\n    setReturnFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    allowOutsideClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    preventScroll: PropTypes.bool,\n    tabbableOptions: PropTypes.shape({\n      displayCheck: PropTypes.oneOf(['full', 'legacy-full', 'non-zero-area', 'none']),\n      getShadowRoot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func])\n    }),\n    trapStack: PropTypes.array,\n    isKeyForward: PropTypes.func,\n    isKeyBackward: PropTypes.func\n  }),\n  containerElements: PropTypes.arrayOf(PropTypes.instanceOf(ElementType)),\n  // DOM element ONLY\n  children: PropTypes.oneOfType([PropTypes.element,\n  // React element\n  PropTypes.instanceOf(ElementType) // DOM element\n  ])\n\n  // NOTE: _createFocusTrap is internal, for testing purposes only, so we don't\n  //  specify it here. It's expected to be set to the function returned from\n  //  require('focus-trap'), or one with a compatible interface.\n};\n\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\nmodule.exports = FocusTrap;","import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  const getActiveElement = function (el) {\n    const activeElement = el.activeElement;\n\n    if (!activeElement) {\n      return;\n    }\n\n    if (\n      activeElement.shadowRoot &&\n      activeElement.shadowRoot.activeElement !== null\n    ) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n\n    return activeElement;\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === getActiveElement(document)) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n      updateObservedNodes();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","call","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","arguments","apply","self","TypeError","_assertThisInitialized","_possibleConstructorReturn","ReferenceError","getPrototypeOf","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_toPrimitive","React","require","PropTypes","createFocusTrap","isFocusable","FocusTrap","_React$Component","subClass","superClass","create","value","_inherits","Constructor","protoProps","staticProps","_super","_this","obj","instance","_classCallCheck","optionName","_this$internalOptions","optionValue","internalOptions","originalOptions","_len","params","Array","_key","Error","concat","_this$getDocument","node","getDocument","querySelector","handleDeactivate","handlePostDeactivate","handleClickOutsideDeactivates","returnFocusOnDeactivate","checkCanReturnFocus","onDeactivate","onPostDeactivate","clickOutsideDeactivates","focusTrapOptions","hasOwnProperty","outsideClick","focusTrapElements","containerElements","updatePreviousElement","document","getNodeForOption","previouslyFocusedElement","currentDocument","activeElement","focusTrap","active","deactivate","returnFocus","event","allowDeactivation","deactivateTrap","_this2","finishDeactivation","returnFocusNode","getReturnFocusNode","canReturnFocus","focus","tabbableOptions","_this2$internalOption","preventScroll","then","activate","paused","pause","some","_createFocusTrap","setupFocusTrap","prevProps","updateContainerElements","hasActivated","hasDeactivated","hasPaused","hasUnpaused","unpause","_this3","child","children","Children","only","type","Fragment","cloneElement","ref","element","current","Component","ElementType","Element","Function","propTypes","bool","shape","object","onActivate","func","onPostActivate","checkCanFocusTrap","onPause","onPostPause","onUnpause","onPostUnpause","initialFocus","oneOfType","instanceOf","string","fallbackFocus","escapeDeactivates","setReturnFocus","allowOutsideClick","displayCheck","oneOf","getShadowRoot","trapStack","array","isKeyForward","isKeyBackward","arrayOf","defaultProps","module","exports","activeFocusTraps","trap","activeTrap","trapIndex","indexOf","splice","push","isTabEvent","keyCode","shiftKey","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","getActualTarget","shadowRoot","composedPath","internalTrapStack","elements","userOptions","doc","config","_objectSpread2","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","configOptionName","findContainerIndex","_ref","container","tabbableNodes","contains","includes","find","_len2","_key2","getInitialFocusNode","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","isTabbable","lastDomTabbableNode","slice","reverse","posTabIndexesFound","getTabIndex","nextTabbableNode","forward","nodeIdx","el","filter","group","g","getActiveElement","tryFocus","tagName","toLowerCase","select","isSelectableInput","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref3","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref4","_destinationGroupIndex","_destinationGroup","checkPointerDown","preventDefault","checkFocusIn","targetContained","Document","nextNode","stopImmediatePropagation","navAcrossContainers","mruContainerIdx","mruTabIdx","n","checkKey","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","window","MutationObserver","mutations","mutation","from","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activateOptions","finishActivation","deactivateOptions","options","clearTimeout","pauseOptions","unpauseOptions","elementsAsArray","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","err","name","getShim","isRequired","ReactPropTypes","bigint","number","symbol","any","elementType","objectOf","exact","checkPropTypes","candidateSelectors","candidateSelector","join","NoElement","matches","msMatchesSelector","webkitMatchesSelector","getRootNode","_element$getRootNode","ownerDocument","isInert","lookUp","_node$getAttribute","inertAtt","getAttribute","parentNode","getCandidates","includeContainer","candidates","querySelectorAll","unshift","getCandidatesIteratively","elementsToCheck","shift","assigned","assignedElements","nestedCandidates","flatten","scopeParent","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","tabIndex","test","_node$getAttribute2","attValue","isContentEditable","sortOrderedTabbables","a","b","documentOrder","isInput","isNonTabbableRadio","isRadio","radioSet","radioScope","form","queryRadios","CSS","escape","console","error","message","checked","nodes","getCheckedRadio","isTabbableRadio","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","getComputedStyle","visibility","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","host","_nodeRoot","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","nodeRoot","nodeRootHost","attached","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isNodeAttached","getClientRects","isNodeMatchingSelectorFocusable","disabled","isHiddenInput","isDetailsWithSummary","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","isScope","candidateTabindex","getSortOrderTabIndex","content","sort","reduce","acc","sortable","focusableCandidateSelector"],"sourceRoot":""}