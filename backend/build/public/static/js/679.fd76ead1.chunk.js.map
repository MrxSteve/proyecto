{"version":3,"file":"static/js/679.fd76ead1.chunk.js","mappings":"2MAQA,MAAMA,GAAOC,EAAAA,EAAAA,OAAK,IAAM,yEAElBC,EAAcA,KAOlB,MAAOC,IAAYC,EAAAA,EAAAA,UAA0B,CAC3CC,KAAK,UAADC,QAAYC,EAAAA,EAAAA,IAAa,IAAO,QACpCC,GAAG,MAADF,QAAQG,EAAAA,EAAAA,UAGN,OAAEC,EAAM,WAAEC,IAAeC,EAAAA,EAAAA,IAAU,CACvCC,KAAMV,EACNW,SAAUC,EAAAA,GAAUC,OACpBC,SAAS,IAGX,OAAKN,GASHO,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,IAAIC,UAC9BJ,EAAAA,EAAAA,KAAClB,EAAI,IACCW,EACJD,OAAQA,EACRP,SAAUA,EACVoB,SAAUR,EAAAA,GAAUC,YAZtBE,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAAAF,UACVJ,EAAAA,EAAAA,KAACG,EAAAA,EAAO,KAaD,EAIf,EAAeI,EAAAA,KAAWvB,G,aC3C1B,MAAMwB,EAAQA,KACZ,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,KAClBC,EAAWC,IAAgB7B,EAAAA,EAAAA,WAAS,GAc3C,OARA8B,EAAAA,EAAAA,YAAU,KACC,OAALL,QAAK,IAALA,GAAAA,EAAOM,QACTR,EAAS,WAGXM,GAAa,EAAM,GAClB,CAACN,EAAUE,IAENG,EAA8B,MAAlBd,EAAAA,EAAAA,KAAChB,EAAW,GAAU,EAG5C,EAAeuB,EAAAA,KAAWC,E","sources":["components/playAsGuest/index.tsx","pages/guest.tsx"],"sourcesContent":["import { ETypeGame } from \"../../utils/constants\";\r\nimport { guid, randomNumber } from \"../../utils/helpers\";\r\nimport { PageWrapper } from \"../wrappers\";\r\nimport { useSocket } from \"../../hooks\";\r\nimport Loading from \"../loading\";\r\nimport React, { Suspense, lazy, useState } from \"react\";\r\nimport type { Player } from \"../../interfaces\";\r\n\r\nconst Game = lazy(() => import(\"../game\"));\r\n\r\nconst PlayAsGuest = () => {\r\n  /**\r\n   * Guarda la información de un jugador temporal\r\n   * No se establece el set, por que no es necesario\r\n   * en este caso se desea que se preserve el valor cuando el\r\n   * componente cambia...\r\n   */\r\n  const [authUser] = useState<Partial<Player>>({\r\n    name: `Player ${randomNumber(10000, 99999)}`,\r\n    id: `id_${guid()}`,\r\n  });\r\n\r\n  const { socket, dataSocket } = useSocket({\r\n    user: authUser,\r\n    typeRoom: ETypeGame.ONLINE,\r\n    isGuest: true,\r\n  });\r\n\r\n  if (!dataSocket) {\r\n    return (\r\n      <PageWrapper>\r\n        <Loading />\r\n      </PageWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Suspense fallback={<Loading />}>\r\n      <Game\r\n        {...dataSocket}\r\n        socket={socket}\r\n        authUser={authUser}\r\n        typeGame={ETypeGame.ONLINE}\r\n      />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default React.memo(PlayAsGuest);","import { useNavigate } from \"react-router-dom\";\r\nimport PlayAsGuest from \"../components/playAsGuest\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport UserContext from \"../provider/userContext\";\r\n\r\nconst Guest = () => {\r\n  const navigate = useNavigate();\r\n  const state = useContext(UserContext);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  /**\r\n   * Efecto que valida si el usuario está auténticado\r\n   * si es así lo rediteccionará a la página de online\r\n   */\r\n  useEffect(() => {\r\n    if (state?.isAuth) {\r\n      navigate(\"/online\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  }, [navigate, state]);\r\n\r\n  return !isLoading ? <PlayAsGuest /> : null;\r\n};\r\n\r\nexport default React.memo(Guest);"],"names":["Game","lazy","PlayAsGuest","authUser","useState","name","concat","randomNumber","id","guid","socket","dataSocket","useSocket","user","typeRoom","ETypeGame","ONLINE","isGuest","_jsx","Suspense","fallback","Loading","children","typeGame","PageWrapper","React","Guest","navigate","useNavigate","state","useContext","UserContext","isLoading","setIsLoading","useEffect","isAuth"],"sourceRoot":""}